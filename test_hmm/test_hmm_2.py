#######################
### Import packages ###
#######################

from functions import *
import matplotlib.pyplot as plt
from hmmlearn import hmm
import sys
from IPython.core import ultratb
sys.excepthook = ultratb.FormattedTB(call_pdb=False)

plt.style.use('paper.mplstyle')

######################
### Mice selection ###
######################

# defining data folder path and mice list
# path_to_data_folder is the path of the folder where you store the folders of your different mice.
#path_to_data_folder='/LocalData/ForagingMice/4TowersTaskMethodPaper_Data/AurelienData/'
path_to_data_folder='/LocalData/ForagingMice/4TowersTaskMethodPaper_Data/MaudData/'

# Analysing the entire group of mice
# mice_to_analyse = [
#     "MOUEml1_5", "MOUEml1_8", "MOUEml1_11", "MOUEml1_12", "MOUEml1_13", "MOUEml1_15", "MOUEml1_18", "MOUEml1_20",
#     "MOURhoA_2", "MOURhoA_5", "MOURhoA_6", "MOURhoA_8", "MOURhoA_9", "MOURhoA_12", "MOURhoA_14",
#     "MOUB6NN_4", "MOUB6NN_6", "MOUB6NN_13", "MOUB6NN_15"
# ]

mice_to_analyse = ['MOU3974','MOU3975', 'MOU3987', 'MOU3988', 'MOU3991', 'MOU3992', 'MOU4551', 'MOU4552', 'MOU4560', 'MOU4561', 'MOU4562',
                   'MOU4563', 'MOU4623', 'MOU4964', 'MOU4965', 'MOU4986', 'MOU4987', 'MOU4988', 'MOU4993', 'MOU5007', 'MOU5008']

##################
### Parameters ###
##################

## XXX
training_mice = mice_to_analyse[0:6]
##

#training_mouse = mice_to_analyse[1]
validation_mouse = mice_to_analyse[12]

epoch_types = ['run_around_tower', 'run_between_towers', 'run_toward_tower', 'exploratory_run']
session_index = 19

######################
### Extract epochs ###
######################

## XXX
training_mice_ordered_epochs_types_number = [extract_runs_sequence(path_to_data_folder, mouse, session_index)[0] for mouse in training_mice]
##

# training_ordered_epochs_types_number = extract_epoch_sequence(path_to_data_folder, training_mouse, session_index)
validation_ordered_epochs_types_number, validation_ordered_runs_frames = extract_runs_sequence(path_to_data_folder, validation_mouse, session_index)

# training_num_epoch = len(training_ordered_epochs_types_number)
validation_num_epoch = len(validation_ordered_epochs_types_number)

###################
### Infer model ###
###################

## XXX

emissions = np.array([])

for x in training_mice_ordered_epochs_types_number:

    emissions = np.concatenate((emissions, x))

emissions = np.int8(emissions).reshape(-1,1)
lengths = [len(x) for x in training_mice_ordered_epochs_types_number]
##

# emissions = np.int8(training_ordered_epochs_types_number.reshape(-1,1))
validation_set = np.int8(validation_ordered_epochs_types_number.reshape(-1,1))

best_model, best_score = infer_best_model(emissions, validation_set, lengths, [2,3,4,5], seed=13)

states = best_model.predict(emissions.reshape(-1,1))

print(f'Best score:      {best_score}')

print(f'Transmission Matrix Recovered:\n{best_model.transmat_.round(3)}\n\n')

print(f'Emission Matrix Recovered:\n{best_model.emissionprob_.round(3)}\n\n')


# with open('/home/david/Documents/code/phd/best_model.pkl', 'wb') as file:
#                 pickle.dump(best_model, file)

# plot a sequence generated by the model
fig=plt.figure(figsize=(4, 7), dpi=300, constrained_layout=False, facecolor='w')
gs = fig.add_gridspec(1, 1)
row1 = gs[0].subgridspec(2, 2)
ax1 = plt.subplot(row1[0,0])
ax2 = plt.subplot(row1[1,0])
ax3 = plt.subplot(row1[0,1])
ax4 = plt.subplot(row1[1,1])

plot_runs_distribution(ax1, validation_ordered_epochs_types_number)
plot_runs_sequence(ax2, validation_ordered_epochs_types_number)

gen_ordered_epochs_types_number, gen_states = best_model.sample(validation_num_epoch)

plot_runs_distribution(ax3, gen_ordered_epochs_types_number.reshape(1,-1)[0])
plot_runs_sequence(ax4, gen_ordered_epochs_types_number.reshape(1,-1)[0])

ax1.set_title('Validation')
ax3.set_title('Recovered')

states = best_model.predict(np.int8(validation_ordered_epochs_types_number.reshape(-1,1)))

# TODO: why gen_states and states have different numbers of states ?

# plot our recovered states compared to generated (aim 1)
fig, ax = plt.subplots()
ax.plot(abs(gen_states-1) + 1.5, label='generated')
ax.plot(abs(states-1) + 1.5, label='recovered')
ax.set_yticks([])
ax.set_title('States compared to generated')
ax.set_xlabel('Time (# rolls)')
ax.set_ylabel('State')
ax.legend()

# plot runs sequence with number of frames

# fig, ax = plt.subplots()
# plot_runs_sequence(ax, validation_ordered_epochs_types_number, ordered_runs_frames=validation_ordered_runs_frames)
# ax.set_title('Raster plot')
# ax.set_xlabel('Frame')
# ax.set_ylabel('Run type')
# ax.legend()


# fig, ax = plt.subplots()
# ax.plot(gen_states[:500] + 1.5, label='generated')
# ax.plot(abs(states[:500]-1) + 1.5, label='recovered')
# ax.set_yticks([])
# ax.set_title('States compared to generated')
# ax.set_xlabel('Time (# rolls)')
# ax.set_xlabel('State')
# ax.legend()


plt.show()

# 


